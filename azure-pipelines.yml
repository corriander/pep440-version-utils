# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

parameters:
- name: run_stage_release
  displayName: Release Build Artifact(s)
  type: boolean
  default: false
- name: target_release_feed
  displayName: Target Azure Artifacts Feed
  type: string
  default: '$(System.TeamProject)/test-releases'
- name: python_reference_version
  displayName: Reference Python Version
  type: string
  default: '3.7'
  values:
  - '3.6'
  - '3.7'

variables:
- name: is_stable_branch
  value: eq( '${{ variables['Build.SourceBranch'] }}' , 'refs/heads/master' )
  readonly: true
- name: dist_artifact_name
  value: 'drop'
  readonly: true

stages:
- stage: stage_test_build
  displayName: Test & Build
  jobs:
  - job: job_test
    displayName: Test Package
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        # Derive these from the allowable versions?
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    - bash: |
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
        echo "##vso[task.prependpath]$HOME/.poetry/bin"
        source $HOME/.poetry/env
        echo "##[debug]Poetry version: $(poetry --version)"
        poetry install
      displayName: 'Install Poetry + Deps'

    - script: |
        poetry add pytest-azurepipelines
        poetry run pytest --cov=pep440_version_utils --cov-report=xml
      displayName: 'Test Package'

  - job: job_build
    displayName: Build Distributable Package
    dependsOn: job_test
    variables:
      python.version: ${{ parameters.python_reference_version }}

    steps:
    # TODO: Template these steps
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    - bash: |
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
        echo "##vso[task.prependpath]$HOME/.poetry/bin"
        source $HOME/.poetry/env
        echo "##[debug]Poetry version: $(poetry --version)"
        poetry install
      displayName: 'Install Poetry + Dependencies'

    - bash: poetry build
      displayName: Poetry Build

    - task: CopyFiles@2
      displayName: Stage Build Artefacts
      inputs:
        SourceFolder: './dist'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: Publish Artefacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: ${{ variables.dist_artifact_name }}
        publishLocation: 'Container'


- stage: stage_release
  displayName: Release
  condition: or( ${{ variables.is_stable_branch }},  eq( '${{ parameters.run_stage_release }}', true) )
  variables:
    python.version: ${{ parameters.python_reference_version }}
    package.feed: ${{ parameters.target_release_feed }}
  jobs:
  - job: job_release
    displayName: Release Package
    steps:

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '${{ variables.dist_artifact_name }}'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    - task: TwineAuthenticate@0
      inputs:
        artifactFeeds: $(package.feed)

    - bash: |
        python -m pip install twine
        twine upload -r "$(package.feed)" --config-file $(PYPIRC_PATH) $(System.ArtifactsDirectory)/${{ variables.dist_artifact_name }}/*
      displayName: Upload Package
